# Define o grupo de servidores Gunicorn/Flask
upstream flask_app {
    # 'web' é o nome do serviço no docker-compose.yaml
    # 5000 é a porta INTERNA que o Gunicorn está escutando
    server app:5000;
}

server {
    listen 80;
    server_name localhost; # Ou seu domínio ex: www.meusite.com

    # Configuração para servir arquivos estáticos diretamente
    location /static/ {
        # O caminho aqui DEVE corresponder ao caminho DENTRO do container Nginx
        # onde o volume 'static_content' foi montado
        alias /app/app/static/;
        expires 7d; # Cache de navegador (opcional)
        access_log off; # Não logar acesso a estáticos (opcional)
    }

    # Configuração para passar todo o resto para a aplicação Flask
    location / {
        # Passa a requisição para o upstream definido acima
        proxy_pass http://flask_app;

        # Headers importantes para o Flask saber sobre a requisição original
        proxy_set_header Host $host; # Passa o host original
        proxy_set_header X-Real-IP $remote_addr; # Passa o IP real do cliente
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Lista de IPs (se houver múltiplos proxies)
        proxy_set_header X-Forwarded-Proto $scheme; # Passa o protocolo original (http ou https)
    }

    # Aqui você pode adicionar configurações de HTTPS, headers de segurança, gzip, etc.
    # Exemplo HTTPS (requer certificados montados via volumes no docker-compose):
    # listen 443 ssl;
    # server_name www.meusite.com;
    # ssl_certificate /etc/nginx/ssl/certs/fullchain.pem;
    # ssl_certificate_key /etc/nginx/ssl/private/privkey.pem;
    # # ... outras diretivas ssl ...

    # Redirecionar HTTP para HTTPS (se usar HTTPS)
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # }
}